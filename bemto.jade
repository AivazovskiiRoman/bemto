//- bemto
//- Copyright(c) 2012 Roman Komarov <kizu@kizu.ru>
//- MIT Licensed

//- Some global variables
- var bemto_chain = []
- var bemto_chain_contexts = ['block']

//- Expanding elements and modifiers
//- and adjustong attributes
- function bemto_init(tag, attributes, isElement) {
-   var bemto_classes = attributes.class.split(' ');
-   var bemto_block = bemto_classes[0].match(/^([^_]+)/)[1]
-   if (!isElement) {
-     bemto_chain[bemto_chain.length] = bemto_block
-     if (bemto_classes.indexOf(bemto_block) === -1) {
-       bemto_classes[bemto_classes.length] = bemto_block
-     }
-   } else {
-     bemto_classes[0] = bemto_chain[bemto_chain.length-1] + '__' + bemto_classes[0]
-   }
-   attributes.class = bemto_classes.join(' ')
-   // rewriting tag name on different contexts
-   var result = tag || 'div';
-   var contextIndex = bemto_chain_contexts.length;
-   // Checks for contexts if no tag given
-   if (!tag && bemto_chain_contexts[contextIndex-1] === 'inline') {
-     result = 'span'; }
-   if (!tag && bemto_chain_contexts[contextIndex-1] === 'list') {
-     result = 'li'; }
-   // Attributes context checks
-   if (attributes.href) {
-     result = 'a'; }
-   if (attributes.src) {
-     result = 'img'; }
-   // Setting context
-   if (['a','abbr','acronym','b','br','code','em','font','i','img','ins','kbd','map','samp','small','span','strong','sub','sup'].indexOf(result) !== -1) {
-     bemto_chain_contexts[contextIndex] = 'inline';
-   } else if (['ul','ol'].indexOf(result) !== -1) {
-     bemto_chain_contexts[contextIndex] = 'list';
-   } else {
-     bemto_chain_contexts[contextIndex] = 'block'; }
-   return result;

- }

//- Block
mixin b(tag)
  tag = bemto_init(tag,attributes)
  if tag === 'img'
    img(alt='', attributes)
  else if tag === 'input'
    input(type='text', attributes)
  else
    #{tag}(attributes)
      block
  - bemto_chain = bemto_chain.splice(0,bemto_chain.length-1)
  - bemto_chain_contexts = bemto_chain_contexts.splice(0,bemto_chain_contexts.length-1)

//- Element
mixin e(tag)
  tag = bemto_init(tag,attributes,true)
  if tag === 'img'
    img(attributes)
  else if tag === 'input'
    input(attributes)
  else
    #{tag}(attributes)
      block
  - bemto_chain_contexts = bemto_chain_contexts.splice(0,bemto_chain_contexts.length-1)
